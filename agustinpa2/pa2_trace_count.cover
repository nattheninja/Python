    1: from fractions import Fraction
       
       
    1: def build_tree(function):
    7:     print(f"Recursion Function: {function}")
    7:     start = function.find("(", 16)
    7:     if start == -1:
    3:         nr_cost = function[17:len(function)-1]
           else:
    4:         end = function.find(")", start)
    4:         nr_cost = "c" + function[start+1:end]
       
           # Finding value of a and b
    7:     if (function[7]).isnumeric():
    5:         a = int(function[7])
    5:         b = int(function[12])
    5:         if "1" in nr_cost:
    2:             f = "c"
               else:
    3:             f = nr_cost
           else:
    2:         a = 1
    2:         b = int(function[11])
    2:         if "1" in function[16:]:
                   f = "c"
               else:
    2:             f = nr_cost
       
           # if f is a polynomial, extract the degree of the polynomial
    7:     if f.find("^") != -1:
    3:         degree = int(f[f.find("^") + 1:])
           else:
    4:         degree = 1
       
    7:     print(f"Depth = 0: [T(n) | {f}]\n")
    7:     if function[7:14].find("/") != -1:
    4:         divide_conquer(degree, a, b, f)
           else:
    3:         chip_conquered(degree, a, b, f)
       
       
    1: def divide_conquer(degree, a, b, f):
   16:     for i in range(3):
   12:         print(f"Depth = {i+1}: ", end="")
   12:         b_update = (b**(i+1))
   12:         a_update = (a**(i+1))
 1048:         for j in range(a_update):
 1036:             if degree == 1:
  598:                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
                   else:
  438:                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
   12:         print()
   12:         total_cost = Fraction(a_update, b_update**degree)
   12:         if f == "c":
    3:             print(f"Sum of nonrecursive cost at Depth {i+1} = {a_update}")
    9:         elif total_cost == 1:
    3:             print(f"Sum of nonrecursive cost at Depth {i+1} = {f}")
               else:
    6:             print(f"Sum of nonrecursive cost at Depth {i+1} = {total_cost}{f}")
   12:         print()
       
       
    1: def chip_conquered(degree, a, b, f):
   12:     for i in range(3):
    9:         print(f"Depth = {i+1}: ", end="")
    9:         b_update = -b*i-b
    9:         a_update = a**(i+1)
   29:         for j in range(a_update):
   20:             if f == "c":
   14:                 print(f"[T(n{b_update}) | 1]  ", end="")
    6:             elif degree == 1:
    3:                 print(f"[T(n{b_update}) | (n{b_update})] ", end="")
                   else:
    3:                 print(f"[T(n{b_update}) | (n{b_update})^{degree}] ", end="")
    9:         print()
    9:         if f == "c":
    3:             print(f"Sum of nonrecursive cost at Depth {i + 1} = {a**(i+1)}")
    6:         elif degree == 1:
    3:             print(f"Sum of nonrecursive cost at Depth {i + 1} = c(n{b_update})")
               else:
    3:             print(f"Sum of nonrecursive cost at Depth {i+1}  = c(n{b_update})^{degree}")
    9:         print()
       
       
    1: if __name__ == '__main__':
    1:     test_cases = open("test_cases.txt")
    8:     for line in test_cases:
    7:         build_tree(line)
    7:         print("----------------------------------------------")
