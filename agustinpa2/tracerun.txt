The following trace displays all lines as they are executed during the program.

 --- modulename: pa2, funcname: <module>
pa2.py(1): from fractions import Fraction
pa2.py(42): def divide_conquer(degree, a, b, f):
pa2.py(63): def chip_conquered(degree, a, b, f):
pa2.py(85): if __name__ == '__main__':
pa2.py(86):     test_cases = open("test_cases.txt")
 --- modulename: codecs, funcname: __init__
codecs.py(268):         self.errors = errors
pa2.py(87):     for line in test_cases:
 --- modulename: cp1252, funcname: decode
cp1252.py(23):         return codecs.charmap_decode(input,self.errors,decoding_table)[0]
pa2.py(88):         build_tree(line)
 --- modulename: pa2, funcname: build_tree
pa2.py(5):     print(f"Recursion Function: {function}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Recursion Function: T(n) = 8T(n/2) + Î˜(1)
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(6):     start = function.find("(", 16)
pa2.py(7):     if start == -1:
pa2.py(10):         end = function.find(")", start)
pa2.py(11):         nr_cost = "c" + function[start+1:end]
pa2.py(14):     if (function[7]).isnumeric():
pa2.py(15):         a = int(function[7])
pa2.py(16):         b = int(function[12])
pa2.py(17):         if "1" in nr_cost:
pa2.py(18):             f = "c"
pa2.py(30):     if f.find("^") != -1:
pa2.py(33):         degree = 1
pa2.py(35):     print(f"Depth = 0: [T(n) | {f}]\n")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 0: [T(n) | c]
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(36):     if function[7:14].find("/") != -1:
pa2.py(37):         divide_conquer(degree, a, b, f)
 --- modulename: pa2, funcname: divide_conquer
pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 1:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | c(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | c(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | c(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | c(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | c(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | c(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | c(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | c(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(55):             print(f"Sum of nonrecursive cost at Depth {i+1} = {a_update}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 1 = 8 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 2:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | c(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(55):             print(f"Sum of nonrecursive cost at Depth {i+1} = {a_update}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 2 = 64 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 3:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | c(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(55):             print(f"Sum of nonrecursive cost at Depth {i+1} = {a_update}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 3 = 512 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(89):         print("----------------------------------------------")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
---------------------------------------------- --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(87):     for line in test_cases:
pa2.py(88):         build_tree(line)
 --- modulename: pa2, funcname: build_tree
pa2.py(5):     print(f"Recursion Function: {function}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Recursion Function: T(n) = 7T(n/2) + Î˜(n^2)
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(6):     start = function.find("(", 16)
pa2.py(7):     if start == -1:
pa2.py(10):         end = function.find(")", start)
pa2.py(11):         nr_cost = "c" + function[start+1:end]
pa2.py(14):     if (function[7]).isnumeric():
pa2.py(15):         a = int(function[7])
pa2.py(16):         b = int(function[12])
pa2.py(17):         if "1" in nr_cost:
pa2.py(20):             f = nr_cost
pa2.py(30):     if f.find("^") != -1:
pa2.py(31):         degree = int(f[f.find("^") + 1:])
pa2.py(35):     print(f"Depth = 0: [T(n) | {f}]\n")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 0: [T(n) | cn^2]
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(36):     if function[7:14].find("/") != -1:
pa2.py(37):         divide_conquer(degree, a, b, f)
 --- modulename: pa2, funcname: divide_conquer
pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 1:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | cn^2(1/2)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | cn^2(1/2)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | cn^2(1/2)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | cn^2(1/2)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | cn^2(1/2)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | cn^2(1/2)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | cn^2(1/2)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(56):         elif total_cost == 1:
 --- modulename: fractions, funcname: __eq__
fractions.py(672):         if type(b) is int:
fractions.py(673):             return a._numerator == b and a._denominator == 1
pa2.py(59):             print(f"Sum of nonrecursive cost at Depth {i+1} = {total_cost}{f}")
 --- modulename: fractions, funcname: __str__
fractions.py(271):         if self._denominator == 1:
fractions.py(274):             return '%s/%s' % (self._numerator, self._denominator)
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 1 = 7/4cn^2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 2:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(56):         elif total_cost == 1:
 --- modulename: fractions, funcname: __eq__
fractions.py(672):         if type(b) is int:
fractions.py(673):             return a._numerator == b and a._denominator == 1
pa2.py(59):             print(f"Sum of nonrecursive cost at Depth {i+1} = {total_cost}{f}")
 --- modulename: fractions, funcname: __str__
fractions.py(271):         if self._denominator == 1:
fractions.py(274):             return '%s/%s' % (self._numerator, self._denominator)
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 2 = 49/16cn^2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 3:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn^2(1/8)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(56):         elif total_cost == 1:
 --- modulename: fractions, funcname: __eq__
fractions.py(672):         if type(b) is int:
fractions.py(673):             return a._numerator == b and a._denominator == 1
pa2.py(59):             print(f"Sum of nonrecursive cost at Depth {i+1} = {total_cost}{f}")
 --- modulename: fractions, funcname: __str__
fractions.py(271):         if self._denominator == 1:
fractions.py(274):             return '%s/%s' % (self._numerator, self._denominator)
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 3 = 343/64cn^2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(89):         print("----------------------------------------------")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
---------------------------------------------- --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(87):     for line in test_cases:
pa2.py(88):         build_tree(line)
 --- modulename: pa2, funcname: build_tree
pa2.py(5):     print(f"Recursion Function: {function}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Recursion Function: T(n) = 3T(n/4) + c(n^2)
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(6):     start = function.find("(", 16)
pa2.py(7):     if start == -1:
pa2.py(10):         end = function.find(")", start)
pa2.py(11):         nr_cost = "c" + function[start+1:end]
pa2.py(14):     if (function[7]).isnumeric():
pa2.py(15):         a = int(function[7])
pa2.py(16):         b = int(function[12])
pa2.py(17):         if "1" in nr_cost:
pa2.py(20):             f = nr_cost
pa2.py(30):     if f.find("^") != -1:
pa2.py(31):         degree = int(f[f.find("^") + 1:])
pa2.py(35):     print(f"Depth = 0: [T(n) | {f}]\n")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 0: [T(n) | cn^2]
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(36):     if function[7:14].find("/") != -1:
pa2.py(37):         divide_conquer(degree, a, b, f)
 --- modulename: pa2, funcname: divide_conquer
pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 1:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn^2(1/4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(56):         elif total_cost == 1:
 --- modulename: fractions, funcname: __eq__
fractions.py(672):         if type(b) is int:
fractions.py(673):             return a._numerator == b and a._denominator == 1
pa2.py(59):             print(f"Sum of nonrecursive cost at Depth {i+1} = {total_cost}{f}")
 --- modulename: fractions, funcname: __str__
fractions.py(271):         if self._denominator == 1:
fractions.py(274):             return '%s/%s' % (self._numerator, self._denominator)
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 1 = 3/16cn^2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 2:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/16) | cn^2(1/16)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/16) | cn^2(1/16)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/16) | cn^2(1/16)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/16) | cn^2(1/16)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/16) | cn^2(1/16)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/16) | cn^2(1/16)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/16) | cn^2(1/16)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/16) | cn^2(1/16)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/16) | cn^2(1/16)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(56):         elif total_cost == 1:
 --- modulename: fractions, funcname: __eq__
fractions.py(672):         if type(b) is int:
fractions.py(673):             return a._numerator == b and a._denominator == 1
pa2.py(59):             print(f"Sum of nonrecursive cost at Depth {i+1} = {total_cost}{f}")
 --- modulename: fractions, funcname: __str__
fractions.py(271):         if self._denominator == 1:
fractions.py(274):             return '%s/%s' % (self._numerator, self._denominator)
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 2 = 9/256cn^2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 3:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(51):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/64) | cn^2(1/64)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(56):         elif total_cost == 1:
 --- modulename: fractions, funcname: __eq__
fractions.py(672):         if type(b) is int:
fractions.py(673):             return a._numerator == b and a._denominator == 1
pa2.py(59):             print(f"Sum of nonrecursive cost at Depth {i+1} = {total_cost}{f}")
 --- modulename: fractions, funcname: __str__
fractions.py(271):         if self._denominator == 1:
fractions.py(274):             return '%s/%s' % (self._numerator, self._denominator)
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 3 = 27/4096cn^2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(89):         print("----------------------------------------------")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
---------------------------------------------- --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(87):     for line in test_cases:
pa2.py(88):         build_tree(line)
 --- modulename: pa2, funcname: build_tree
pa2.py(5):     print(f"Recursion Function: {function}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Recursion Function: T(n) = 2T(n/2) + cn
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(6):     start = function.find("(", 16)
pa2.py(7):     if start == -1:
pa2.py(8):         nr_cost = function[17:len(function)-1]
pa2.py(14):     if (function[7]).isnumeric():
pa2.py(15):         a = int(function[7])
pa2.py(16):         b = int(function[12])
pa2.py(17):         if "1" in nr_cost:
pa2.py(20):             f = nr_cost
pa2.py(30):     if f.find("^") != -1:
pa2.py(33):         degree = 1
pa2.py(35):     print(f"Depth = 0: [T(n) | {f}]\n")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 0: [T(n) | cn]
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(36):     if function[7:14].find("/") != -1:
pa2.py(37):         divide_conquer(degree, a, b, f)
 --- modulename: pa2, funcname: divide_conquer
pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 1:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | cn(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/2) | cn(1/2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(56):         elif total_cost == 1:
 --- modulename: fractions, funcname: __eq__
fractions.py(672):         if type(b) is int:
fractions.py(673):             return a._numerator == b and a._denominator == 1
pa2.py(57):             print(f"Sum of nonrecursive cost at Depth {i+1} = {f}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 1 = cn --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 2:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/4) | cn(1/4)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(56):         elif total_cost == 1:
 --- modulename: fractions, funcname: __eq__
fractions.py(672):         if type(b) is int:
fractions.py(673):             return a._numerator == b and a._denominator == 1
pa2.py(57):             print(f"Sum of nonrecursive cost at Depth {i+1} = {f}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 2 = cn --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(44):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 3:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(45):         b_update = (b**(i+1))
pa2.py(46):         a_update = (a**(i+1))
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(48):             if degree == 1:
pa2.py(49):                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n/8) | cn(1/8)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(47):         for j in range(a_update):
pa2.py(52):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(53):         total_cost = Fraction(a_update, b_update**degree)
 --- modulename: fractions, funcname: __new__
fractions.py(93):         self = super(Fraction, cls).__new__(cls)
fractions.py(95):         if denominator is None:
fractions.py(142):         elif type(numerator) is int is type(denominator):
fractions.py(143):             pass # *very* normal case
fractions.py(155):         if denominator == 0:
fractions.py(157):         if _normalize:
fractions.py(158):             g = math.gcd(numerator, denominator)
fractions.py(159):             if denominator < 0:
fractions.py(161):             numerator //= g
fractions.py(162):             denominator //= g
fractions.py(163):         self._numerator = numerator
fractions.py(164):         self._denominator = denominator
fractions.py(165):         return self
pa2.py(54):         if f == "c":
pa2.py(56):         elif total_cost == 1:
 --- modulename: fractions, funcname: __eq__
fractions.py(672):         if type(b) is int:
fractions.py(673):             return a._numerator == b and a._denominator == 1
pa2.py(57):             print(f"Sum of nonrecursive cost at Depth {i+1} = {f}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 3 = cn --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(60):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(43):     for i in range(3):
pa2.py(89):         print("----------------------------------------------")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
---------------------------------------------- --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(87):     for line in test_cases:
pa2.py(88):         build_tree(line)
 --- modulename: pa2, funcname: build_tree
pa2.py(5):     print(f"Recursion Function: {function}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Recursion Function: T(n) = T(n-1) + cn
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(6):     start = function.find("(", 16)
pa2.py(7):     if start == -1:
pa2.py(8):         nr_cost = function[17:len(function)-1]
pa2.py(14):     if (function[7]).isnumeric():
pa2.py(22):         a = 1
pa2.py(23):         b = int(function[11])
pa2.py(24):         if "1" in function[16:]:
pa2.py(27):             f = nr_cost
pa2.py(30):     if f.find("^") != -1:
pa2.py(33):         degree = 1
pa2.py(35):     print(f"Depth = 0: [T(n) | {f}]\n")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 0: [T(n) | n]
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(36):     if function[7:14].find("/") != -1:
pa2.py(39):         chip_conquered(degree, a, b, f)
 --- modulename: pa2, funcname: chip_conquered
pa2.py(64):     for i in range(3):
pa2.py(65):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 1:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(66):         b_update = -b*i-b
pa2.py(67):         a_update = a**(i+1)
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(71):             elif degree == 1:
pa2.py(72):                 print(f"[T(n{b_update}) | (n{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-1) | (n-1)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(75):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(76):         if f == "c":
pa2.py(78):         elif degree == 1:
pa2.py(79):             print(f"Sum of nonrecursive cost at Depth {i + 1} = c(n{b_update})")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 1 = c(n-1) --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(82):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(64):     for i in range(3):
pa2.py(65):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 2:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(66):         b_update = -b*i-b
pa2.py(67):         a_update = a**(i+1)
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(71):             elif degree == 1:
pa2.py(72):                 print(f"[T(n{b_update}) | (n{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-2) | (n-2)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(75):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(76):         if f == "c":
pa2.py(78):         elif degree == 1:
pa2.py(79):             print(f"Sum of nonrecursive cost at Depth {i + 1} = c(n{b_update})")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 2 = c(n-2) --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(82):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(64):     for i in range(3):
pa2.py(65):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 3:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(66):         b_update = -b*i-b
pa2.py(67):         a_update = a**(i+1)
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(71):             elif degree == 1:
pa2.py(72):                 print(f"[T(n{b_update}) | (n{b_update})] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-3) | (n-3)]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(75):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(76):         if f == "c":
pa2.py(78):         elif degree == 1:
pa2.py(79):             print(f"Sum of nonrecursive cost at Depth {i + 1} = c(n{b_update})")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 3 = c(n-3) --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(82):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(64):     for i in range(3):
pa2.py(89):         print("----------------------------------------------")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
---------------------------------------------- --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(87):     for line in test_cases:
pa2.py(88):         build_tree(line)
 --- modulename: pa2, funcname: build_tree
pa2.py(5):     print(f"Recursion Function: {function}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Recursion Function: T(n) = 2T(n-1) + 1
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(6):     start = function.find("(", 16)
pa2.py(7):     if start == -1:
pa2.py(8):         nr_cost = function[17:len(function)-1]
pa2.py(14):     if (function[7]).isnumeric():
pa2.py(15):         a = int(function[7])
pa2.py(16):         b = int(function[12])
pa2.py(17):         if "1" in nr_cost:
pa2.py(18):             f = "c"
pa2.py(30):     if f.find("^") != -1:
pa2.py(33):         degree = 1
pa2.py(35):     print(f"Depth = 0: [T(n) | {f}]\n")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 0: [T(n) | c]
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(36):     if function[7:14].find("/") != -1:
pa2.py(39):         chip_conquered(degree, a, b, f)
 --- modulename: pa2, funcname: chip_conquered
pa2.py(64):     for i in range(3):
pa2.py(65):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 1:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(66):         b_update = -b*i-b
pa2.py(67):         a_update = a**(i+1)
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-1) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-1) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(75):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(76):         if f == "c":
pa2.py(77):             print(f"Sum of nonrecursive cost at Depth {i + 1} = {a**(i+1)}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 1 = 2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(82):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(64):     for i in range(3):
pa2.py(65):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 2:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(66):         b_update = -b*i-b
pa2.py(67):         a_update = a**(i+1)
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-2) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-2) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-2) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-2) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(75):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(76):         if f == "c":
pa2.py(77):             print(f"Sum of nonrecursive cost at Depth {i + 1} = {a**(i+1)}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 2 = 4 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(82):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(64):     for i in range(3):
pa2.py(65):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 3:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(66):         b_update = -b*i-b
pa2.py(67):         a_update = a**(i+1)
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-3) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-3) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-3) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-3) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-3) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-3) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-3) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(70):                 print(f"[T(n{b_update}) | 1]  ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-3) | 1]   --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(75):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(76):         if f == "c":
pa2.py(77):             print(f"Sum of nonrecursive cost at Depth {i + 1} = {a**(i+1)}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 3 = 8 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(82):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(64):     for i in range(3):
pa2.py(89):         print("----------------------------------------------")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
---------------------------------------------- --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(87):     for line in test_cases:
 --- modulename: cp1252, funcname: decode
cp1252.py(23):         return codecs.charmap_decode(input,self.errors,decoding_table)[0]
pa2.py(88):         build_tree(line)
 --- modulename: pa2, funcname: build_tree
pa2.py(5):     print(f"Recursion Function: {function}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Recursion Function: T(n) = T(n-2) + c(n^2) --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(6):     start = function.find("(", 16)
pa2.py(7):     if start == -1:
pa2.py(10):         end = function.find(")", start)
pa2.py(11):         nr_cost = "c" + function[start+1:end]
pa2.py(14):     if (function[7]).isnumeric():
pa2.py(22):         a = 1
pa2.py(23):         b = int(function[11])
pa2.py(24):         if "1" in function[16:]:
pa2.py(27):             f = nr_cost
pa2.py(30):     if f.find("^") != -1:
pa2.py(31):         degree = int(f[f.find("^") + 1:])
pa2.py(35):     print(f"Depth = 0: [T(n) | {f}]\n")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 0: [T(n) | cn^2]
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(36):     if function[7:14].find("/") != -1:
pa2.py(39):         chip_conquered(degree, a, b, f)
 --- modulename: pa2, funcname: chip_conquered
pa2.py(64):     for i in range(3):
pa2.py(65):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 1:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(66):         b_update = -b*i-b
pa2.py(67):         a_update = a**(i+1)
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(71):             elif degree == 1:
pa2.py(74):                 print(f"[T(n{b_update}) | (n{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-2) | (n-2)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(75):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(76):         if f == "c":
pa2.py(78):         elif degree == 1:
pa2.py(81):             print(f"Sum of nonrecursive cost at Depth {i+1}  = c(n{b_update})^{degree}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 1  = c(n-2)^2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(82):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(64):     for i in range(3):
pa2.py(65):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 2:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(66):         b_update = -b*i-b
pa2.py(67):         a_update = a**(i+1)
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(71):             elif degree == 1:
pa2.py(74):                 print(f"[T(n{b_update}) | (n{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-4) | (n-4)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(75):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(76):         if f == "c":
pa2.py(78):         elif degree == 1:
pa2.py(81):             print(f"Sum of nonrecursive cost at Depth {i+1}  = c(n{b_update})^{degree}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 2  = c(n-4)^2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(82):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(64):     for i in range(3):
pa2.py(65):         print(f"Depth = {i+1}: ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Depth = 3:  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(66):         b_update = -b*i-b
pa2.py(67):         a_update = a**(i+1)
pa2.py(68):         for j in range(a_update):
pa2.py(69):             if f == "c":
pa2.py(71):             elif degree == 1:
pa2.py(74):                 print(f"[T(n{b_update}) | (n{b_update})^{degree}] ", end="")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
[T(n-6) | (n-6)^2]  --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
pa2.py(68):         for j in range(a_update):
pa2.py(75):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(76):         if f == "c":
pa2.py(78):         elif degree == 1:
pa2.py(81):             print(f"Sum of nonrecursive cost at Depth {i+1}  = c(n{b_update})^{degree}")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
Sum of nonrecursive cost at Depth 3  = c(n-6)^2 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(82):         print()
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(64):     for i in range(3):
pa2.py(89):         print("----------------------------------------------")
 --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
---------------------------------------------- --- modulename: cp1252, funcname: encode
cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

pa2.py(87):     for line in test_cases:
 --- modulename: cp1252, funcname: decode
cp1252.py(23):         return codecs.charmap_decode(input,self.errors,decoding_table)[0]
