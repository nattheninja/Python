    1: from fractions import Fraction
       
       
    1: def build_tree(function):
    1:     print(f"Recursion Function: {function}")
    1:     start = function.find("(", 16)
    1:     if start == -1:
    1:         nr_cost = function[17:len(function)-1]
           else:
               end = function.find(")", start)
               nr_cost = "c" + function[start+1:end]
       
           # Finding value of a and b
    1:     if (function[7]).isnumeric():
    1:         a = int(function[7])
    1:         b = int(function[12])
    1:         if "1" in nr_cost:
                   f = "c"
               else:
    1:             f = nr_cost
           else:
               a = 1
               b = int(function[11])
               if "1" in function[16:]:
                   f = "c"
               else:
                   f = nr_cost
       
           # if f is a polynomial, extract the degree of the polynomial
    1:     if f.find("^") != -1:
               degree = int(f[f.find("^") + 1:])
           else:
    1:         degree = 1
       
    1:     print(f"Depth = 0: [T(n) | {f}]\n")
    1:     if function[7:14].find("/") != -1:
    1:         divide_conquer(degree, a, b, f)
           else:
               chip_conquered(degree, a, b, f)
       
       
    1: def divide_conquer(degree, a, b, f):
    4:     for i in range(3):
    3:         print(f"Depth = {i+1}: ", end="")
    3:         b_update = (b**(i+1))
    3:         a_update = (a**(i+1))
   17:         for j in range(a_update):
   14:             if degree == 1:
   14:                 print(f"[T(n/{b_update}) | {f}(1/{b_update})] ", end="")
                   else:
                       print(f"[T(n/{b_update}) | {f}(1/{b_update})^{degree}] ", end="")
    3:         print()
    3:         total_cost = Fraction(a_update, b_update**degree)
    3:         if f == "c":
                   print(f"Sum of nonrecursive cost at Depth {i+1} = {a_update}")
    3:         elif total_cost == 1:
    3:             print(f"Sum of nonrecursive cost at Depth {i+1} = {f}")
               else:
                   print(f"Sum of nonrecursive cost at Depth {i+1} = {total_cost}{f}")
    3:         print()
       
       
    1: def chip_conquered(degree, a, b, f):
           for i in range(3):
               print(f"Depth = {i+1}: ", end="")
               b_update = -b*i-b
               a_update = a**(i+1)
               for j in range(a_update):
                   if f == "c":
                       print(f"[T(n{b_update}) | 1]  ", end="")
                   elif degree == 1:
                       print(f"[T(n{b_update}) | (n{b_update})] ", end="")
                   else:
                       print(f"[T(n{b_update}) | (n{b_update})^{degree}] ", end="")
               print()
               if f == "c":
                   print(f"Sum of nonrecursive cost at Depth {i + 1} = {a**(i+1)}")
               elif degree == 1:
                   print(f"Sum of nonrecursive cost at Depth {i + 1} = c(n{b_update})")
               else:
                   print(f"Sum of nonrecursive cost at Depth {i+1}  = c(n{b_update})^{degree}")
               print()
       
       
    1: if __name__ == '__main__':
    1:     test_cases = open("test_cases.txt")
    1:     test1 = test_cases.readline()
    1:     test2 = test_cases.readline()
    1:     test3 = test_cases.readline()
    1:     test4 = test_cases.readline()
    1:     build_tree(test4)
       #    for line in test_cases:
       #        build_tree(line)
       #        print("----------------------------------------------")
